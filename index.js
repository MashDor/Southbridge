//expressionsMatter() работает при условии, что применяя сложение, умножение и группировку чисел в скобки числа a, b и с не меняются местами.
    // Функция работающая с выражениями, где числа могут быть переставленны:

    // function expressionsMatter(a, b, c) {
    //     return Math.max(a*b*c, a+b+c, a*(b+c), (a+b)*c, (a+c)*b);
    // }
    
    // x * y меньше, чем x + y только если хотя бы одно из чисел равно 1.
    // Поэтому, если нет единиц, то наибольший результат даст выражение a*b*c.
    // Если все числа - единицы, наибольший результат будет a+b+c.
    // Наибольшим будет a*(b+c), когда верно условие a > 1 && (c == 1 || b == 1 && c > 1 && a > c).
    // (a+b)*c - когда верно c > 1 && (a == 1 || b == 1 && a > 1 && c > a).

    // Мы не берем в учет выражения a*b+c и a+b*с, потому что нет случаев, когда они дадут набольший результат.

    // Также не берем в учет выражения, которые приводимы к a*b*c, a+b+c, a*(b+c), (a+b)*c

    // Был вариант реализовать эту функцию с помощью условий, но вариант с Math.max() показался мне более лаконичным.

    function expressionsMatter(a, b, c) {
        return Math.max(a*b*c, a+b+c, a*(b+c), (a+b)*c);
    }

    /////////////////////////////////////////


    //Если a^2 - наименьший квадрат числа N (N > 0)
    // тогда верно выражение a^2 + n = b^2 ,
    // где a < b, a^2 - искомое число, n - исходные данные

    // Приводим выражение к виду
    // b^2 - a^2 = n ==> (b - a)(b + a) = n

    // Нужно найти 2 числа, которые соответствуют условиям:
    // x = (b - a)
    // y = (b + a)
    // x*y = n

    // Тогда a = (x - y) / 2  и ответом будет ((max(x, y) - min(x, y)) / 2)^2

    // При этом множители числа n - x и y - должны быть максимально близки друг к другу, но не равны, поэтому мы начинаем поиск с Math.floor(Math.sqrt(n)).

    function solve(n) {
        for (i = Math.floor(Math.sqrt(n)); i >= 1; i--) {
            if (n % i == 0) {
                let result = (i - n / i) / 2;
                if (result != 0 && result % 1 == 0) return result*result;
            }
        }
        return -1;
    }